# -*- coding: utf-8 -*-
"""Irish Flower Classification using NN.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yHMOxxxeFHB6a8jgr-hQJqEtIIB2Rp7I

#Irish Folower Classification

##Types
1. Setosa
2. Versicolor
3. Virginica
"""

# Commented out IPython magic to ensure Python compatibility.
#importing files
import torch
import torch.nn as nn
import torch.nn.functional as F
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
# %matplotlib inline

#Creating a model class that inherits nn module
class Model(nn.Module):
  #input layer(4 features of flower)---> hidden layer1---> Hidden layer2----> Output(Three classes of flower)
  def __init__(self, in_features=4, h1=8, h2=9, out_features=3):
    super().__init__() #instantiate  nn.Module
    self.fc1 = nn.Linear(in_features, h1)
    self.fc2 = nn.Linear(h1, h2)
    self.out = nn.Linear(h2, out_features)

  def forward(self, x):
    x = F.relu(self.fc1(x))
    x = F.relu(self.fc2(x))
    x = self.out(x)

    return x

#pick a maual seed for randomizatin
torch.manual_seed(69)
#create an instance of model
model = Model()

#Importing the dataset
url = 'https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/0e7a9b0a5d22642a06d3d5b9bcbad9890c8ee534/iris.csv'
my_df = pd.read_csv(url)
my_df

# Assign output type a number
my_df['species'] = my_df['species'].replace('setosa', 0.0)
my_df['species'] = my_df['species'].replace('versicolor', 1.0)
my_df['species'] = my_df['species'].replace('virginica', 2.0)
my_df

#Train test split. Set X and y
X = my_df.drop('species', axis = 1)
y = my_df['species']
print('Input Features of Irish Flower:')
X

print('Output feature of Irish Flower')
y

#Converting X and y to numpy array
X = X.values
y = y.values

y

#Train test split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=69)

# Converting numpy data to tensors
X_train = torch.FloatTensor(X_train)
X_test = torch.FloatTensor(X_test)
y_train = torch.LongTensor(y_train)
y_test = torch.LongTensor(y_test)
print(X_train)
print(y_train)

# Set the criterion of the model to measure the error
criterion = nn.CrossEntropyLoss()
#Choose adam optmizer, lr = learning rate
optimizer = torch.optim.Adam(model.parameters(), lr=0.01)

# Training the model
epochs = 151
losses = []
for i in range(epochs):
  y_pred = model.forward(X_train) #getting the predicted result

  # measuring the loss
  loss = criterion(y_pred, y_train)

  # keeping track of loss
  losses.append(loss.detach().numpy())

  #Print every 10 epochs
  if i%10 == 0:
    print(f'Epoch: {i} and loss: {loss}')

  # Backpropagation
  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

#Plotting loss vs epochs
plt.plot(range(epochs), losses)
plt.ylabel("loss/error")
plt.xlabel('Epochs')

# Evaluating modeo on Test data set(validate model on test set)
with torch.no_grad():#basicaly turn off back propagation
   y_eval = model.forward(X_test)
   loss = criterion(y_eval, y_test)

print(loss)

correct = 0
with torch.no_grad():
  for i, data in enumerate(X_test):
    y_val = model.forward(data)

    if y_test[i] == 0:
      x = "setosa"
    elif y_test[i] == 1:
      x = "versicolor"
    else:
      x = 'virginica'
    #will tell what type of flower class our netowrk thinks it is
    print(f'{i+1}. {str(y_val)} \t {x}')

    #correct or not
    if y_val.argmax().item() == y_test[i]:
      correct+=1

print(correct)

#Evaluating new data on network
new_iris = torch.tensor([4.7, 2.3, 1.6, 3.8])
with torch.no_grad():
  print(model(new_iris))

#Saving the Neural Network Model
torch.save(model.state_dict(), 'Iris_flower_classification_model.pt')

#Loading the saved model
new_model = Model()
new_model.load_state_dict(torch.load('Iris_flower_classification_model.pt'))

# making sure it loaded correctly
new_model.eval()